#MODEL AVERAGING FOR RE-ESF MODELS
#number of variables = 5
#number of spatialy varying coef. = ncol(mod"i"$bse_vc)-1
#xconst = 5- n(x)
#loglik = mod"i"$e$stat[3]
#xvary <- ncol(mod10$bse_vc)-1
#xconstant <- 4 - ncol(mod10$bse_vc)
#loglik <-  mod10$e$stat[3]
#n = 81

#df = xconstant + 2*xvary + 1
#aic = -2*loglik + 2*df
#AICc = aic + ((2*(df^2) + 2*df) / (n-df-1))


#PERIOD 1 AICc SCORES
# Create an empty dataframe to store the results
p1_aicc_df <- data.frame(Model = character(length(period1_modlist)), AICc = numeric(length(period1_modlist)), LogLik = numeric(length(period1_modlist)))

# Loop through each model in the list
for (i in seq_along(period1_modlist)) {
  # Extract the model from the list
  model <- period1_modlist[[i]]
  
  # Calculate the necessary values
  xvary <- ncol(model$bse_vc) - 1
  xconstant <- 4 - ncol(model$bse_vc)
  loglik <- model$e$stat[3]
  n <- 81
  
  df <- xconstant + 2*xvary + 1
  aic <- -2*loglik + 2*df
  aicc <- aic + ((2*(df^2) + 2*df) / (n - df - 1))
  
  
  # Store the results in the dataframe
  p1_aicc_df[i, ] <- c(paste0("mod", i), aicc, loglik)
}

# Print the resulting dataframe
p1_aicc_df


# Calculate delta AICc
p1_aicc_df$AICc <- as.numeric(p1_aicc_df$AICc)
p1_aicc_df$delta_AICc <- p1_aicc_df$AICc - min(p1_aicc_df$AICc)


#PERIOD 2 AICc SCORES

# Create an empty dataframe to store the results
p2_aicc_df <- data.frame(Model = character(length(period2_modlist)), AICc = numeric(length(period2_modlist)), LogLik = numeric(length(period2_modlist)))   

# Loop through each model in the list
for (i in seq_along(period2_modlist)) {
  # Extract the model from the list
  model <- period2_modlist[[i]]
  
  # Calculate the necessary values
  xvary <- ncol(model$bse_vc) - 1
  xconstant <- 4 - ncol(model$bse_vc)
  loglik <- model$e$stat[3]
  n <- 81
  
  df <- xconstant + 2*xvary + 1
  aic <- -2*loglik + 2*df
  aicc <- aic + ((2*(df^2) + 2*df) / (n - df - 1))
  
  # Store the results in the dataframe
  p2_aicc_df[i, ] <- c(paste0("mod", i), aicc, loglik)
}

# Print the resulting dataframe
p2_aicc_df

# Calculate delta AICc
p2_aicc_df$AICc <- as.numeric(p2_aicc_df$AICc)
p2_aicc_df$delta_AICc <- p2_aicc_df$AICc - min(p2_aicc_df$AICc)

#PERIOD 3 AICc SCORES
# Create an empty dataframe to store the results
p3_aicc_df <- data.frame(Model = character(length(period3_modlist)), AICc = numeric(length(period3_modlist)), LogLik = numeric(length(period3_modlist)))

# Loop through each model in the list
for (i in seq_along(period3_modlist)) {
  # Extract the model from the list
  model <- period3_modlist[[i]]
  
  # Calculate the necessary values
  xvary <- ncol(model$bse_vc) - 1
  xconstant <- 4 - ncol(model$bse_vc)
  loglik <- model$e$stat[3]
  n <- 81
  
  df <- xconstant + 2*xvary + 1
  aic <- -2*loglik + 2*df
  aicc <- aic + ((2*(df^2) + 2*df) / (n - df - 1))
  
  # Store the results in the dataframe
  p3_aicc_df[i, ] <- c(paste0("mod", i), aicc, loglik)
}

# Print the resulting dataframe
p3_aicc_df

# Calculate delta AICc
p3_aicc_df$AICc <- as.numeric(p3_aicc_df$AICc)
p3_aicc_df$delta_AICc <- p3_aicc_df$AICc - min(p3_aicc_df$AICc)

#PERIOD 4 AICc SCORES
# Create an empty dataframe to store the results
p4_aicc_df <- data.frame(Model = character(length(period4_modlist)), AICc = numeric(length(period4_modlist)), loglik = numeric(length(period4_modlist)))

# Loop through each model in the list
for (i in seq_along(period4_modlist)) {
  # Extract the model from the list
  model <- period4_modlist[[i]]
  
  # Calculate the necessary values
  xvary <- ncol(model$bse_vc) - 1
  xconstant <- 4 - ncol(model$bse_vc)
  loglik <- model$e$stat[3]
  n <- 81
  
  df <- xconstant + 2*xvary + 1
  aic <- -2*loglik + 2*df
  aicc <- aic + ((2*(df^2) + 2*df) / (n - df - 1))
  
  # Store the results in the dataframe
  p4_aicc_df[i, ] <- c(paste0("mod", i), aicc, loglik)
}

# Print the resulting dataframe
p4_aicc_df

# Calculate delta AICc
p4_aicc_df$AICc <- as.numeric(p4_aicc_df$AICc)
p4_aicc_df$delta_AICc <- p4_aicc_df$AICc - min(p4_aicc_df$AICc)

#MODEL AVERAGES BY FIT
#create weights variable
p1_aicc_df$weight <-  exp(-0.5 * p1_aicc_df$delta_AICc) / sum(exp(-0.5 * p1_aicc_df$delta_AICc))
p2_aicc_df$weight <-  exp(-0.5 * p2_aicc_df$delta_AICc) / sum(exp(-0.5 * p2_aicc_df$delta_AICc))
p3_aicc_df$weight <-  exp(-0.5 * p3_aicc_df$delta_AICc) / sum(exp(-0.5 * p3_aicc_df$delta_AICc))
p4_aicc_df$weight <-  exp(-0.5 * p4_aicc_df$delta_AICc) / sum(exp(-0.5 * p4_aicc_df$delta_AICc))

#PERIOD 1 
#separate dfs for coefficients, p values and moran scores
# Create an empty list to store the resulting dataframes
results_list_p1 <- list()

# Loop through the first 16 models in period1_modlist
for (i in 1:16) {
  
  # Extract the necessary variables from the model and create the coefficient dataframe
  vary <- period1_modlist[[i]]$b_vc %>% select(-"(Intercept)")
  const <- data.frame(t(period1_modlist[[i]]$c %>% select(Estimate)))
  const[2:81,] <- rep(const[1, 1:ncol(const)], times = 80)
  coef_df <- cbind(vary, const)
  
  # Extract the necessary variables from the model and create the p-value dataframe
  vary_p <- period1_modlist[[i]]$p_vc %>% select(-"(Intercept)")
  const_p <- data.frame(t(period1_modlist[[i]]$c %>% select(p_value)))
  const_p[2:81,] <- rep(const_p[1, 1:ncol(const)], times = 80)
  pval_df <- cbind(vary_p, const_p)
  
  # Extract the necessary variables from the model and create the moran dataframe
  moran_df <- period1_modlist[[i]]$s[[1]][2, ] %>% select(-"(Intercept)")
  
  # Combine the resulting dataframes into a list and store it in the results_list_p1
  results_list_p1[[i]] <- list(coef_df = coef_df, pval_df = pval_df, moran_df = moran_df)
  
}

# Print the resulting list of dataframes
results_list_p1
colnames(results_list_p1[[1]]$coef_df)[1] <- "socecon"
colnames(results_list_p1[[1]]$pval_df)[1] <- "socecon"
colnames(results_list_p1[[1]]$moran_df)[1] <- "socecon"

colnames(results_list_p1[[2]]$coef_df)[1] <- "av_unemp"
colnames(results_list_p1[[2]]$pval_df)[1] <- "av_unemp"
colnames(results_list_p1[[2]]$moran_df)[1] <- "av_unemp"

colnames(results_list_p1[[4]]$coef_df)[1] <- "n_weighted"
colnames(results_list_p1[[4]]$pval_df)[1] <- "n_weighted"
colnames(results_list_p1[[4]]$moran_df)[1] <- "n_weighted"

colnames(results_list_p1[[8]]$coef_df)[1] <- "socasistpergdp"
colnames(results_list_p1[[8]]$pval_df)[1] <- "socasistpergdp"
colnames(results_list_p1[[8]]$moran_df)[1] <- "socasistpergdp"

colnames(results_list_p1[[15]]$coef_df)[5] <- "kurdish"
colnames(results_list_p1[[15]]$pval_df)[5] <- "kurdish"

colnames(results_list_p1[[16]]$coef_df)[5] <- "kurdish"
colnames(results_list_p1[[16]]$pval_df)[5] <- "kurdish"

# Combine first data frame from each list
coef_df_p1 <- bind_rows(lapply(results_list_p1, "[[", 1))

# Combine second data frame from each list
pval_df_p1 <- bind_rows(lapply(results_list_p1, "[[", 2))

# Combine third data frame from each list
moran_df_p1 <- bind_rows(lapply(results_list_p1, "[[", 3))

# Create variables of model numbers and citynames
model_numbers <- rep(paste0("mod", 1:16), each = 81)
city_names <- rep(unique(period1$CityCode), times = 16)

coef_df_p1 <- coef_df_p1 %>% mutate(Model = model_numbers, CityCode = city_names)
pval_df_p1 <- pval_df_p1 %>% mutate(Model = model_numbers, CityCode = city_names)
moran_df_p1 <- moran_df_p1 %>% mutate(Model = paste0("mod", 1:16))

#multiply by weight and take average
coef_df_p1 <- full_join(coef_df_p1, p1_aicc_df)
coef_df_p1 <- coef_df_p1 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

# Group by model number and calculate mean of each variable
coef_p1 <- coef_df_p1 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()


pval_df_p1 <- full_join(pval_df_p1, p1_aicc_df)
pval_df_p1 <- pval_df_p1 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

pval_p1 <- pval_df_p1 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()

moran_df_p1 <- full_join(moran_df_p1, p1_aicc_df)
moran_df_p1 <- moran_df_p1 %>% 
  mutate(across(socecon:socasistpergdp, ~ . * weight))

moran_p1 <- moran_df_p1 %>%
  summarize(socecon = sum(socecon, na.rm = T),
            av_unemp = sum(av_unemp, na.rm = T),
            n_weighted = sum(n_weighted, na.rm = T),
            socasistpergdp = sum(socasistpergdp,na.rm = T)) %>%
  ungroup()

rm(coef_df, coef_df_p1, const, const_p, df_agg_st, model, moran_df, p1_aicc_df, period1_modlist, pval_df, pval_df_p1, results_list_p1, vary, vary_p)


#PERIOD 2 
#separate dfs for coefficients, p values and moran scores
# Create an empty list to store the resulting dataframes
results_list_p2 <- list()

# Loop through the first 16 models in period2_modlist
for (i in 1:16) {
  
  # Extract the necessary variables from the model and create the coefficient dataframe
  vary <- period2_modlist[[i]]$b_vc %>% select(-"(Intercept)")
  const <- data.frame(t(period2_modlist[[i]]$c %>% select(Estimate)))
  const[2:81,] <- rep(const[1, 1:ncol(const)], times = 80)
  coef_df <- cbind(vary, const)
  
  # Extract the necessary variables from the model and create the p-value dataframe
  vary_p <- period2_modlist[[i]]$p_vc %>% select(-"(Intercept)")
  const_p <- data.frame(t(period2_modlist[[i]]$c %>% select(p_value)))
  const_p[2:81,] <- rep(const_p[1, 1:ncol(const)], times = 80)
  pval_df <- cbind(vary_p, const_p)
  
  # Extract the necessary variables from the model and create the moran dataframe
  moran_df <- period2_modlist[[i]]$s[[1]][2, ] %>% select(-"(Intercept)")
  
  # Combine the resulting dataframes into a list and store it in the results_list_p2
  results_list_p2[[i]] <- list(coef_df = coef_df, pval_df = pval_df, moran_df = moran_df)
  
}

# Print the resulting list of dataframes
results_list_p2

colnames(results_list_p2[[1]]$coef_df)[1] <- "socecon"
colnames(results_list_p2[[1]]$pval_df)[1] <- "socecon"
colnames(results_list_p2[[1]]$moran_df)[1] <- "socecon"

colnames(results_list_p2[[2]]$coef_df)[1] <- "av_unemp"
colnames(results_list_p2[[2]]$pval_df)[1] <- "av_unemp"
colnames(results_list_p2[[2]]$moran_df)[1] <- "av_unemp"

colnames(results_list_p2[[4]]$coef_df)[1] <- "n_weighted"
colnames(results_list_p2[[4]]$pval_df)[1] <- "n_weighted"
colnames(results_list_p2[[4]]$moran_df)[1] <- "n_weighted"

colnames(results_list_p2[[8]]$coef_df)[1] <- "socasistpergdp"
colnames(results_list_p2[[8]]$pval_df)[1] <- "socasistpergdp"
colnames(results_list_p2[[8]]$moran_df)[1] <- "socasistpergdp"

colnames(results_list_p2[[15]]$coef_df)[5] <- "kurdish"
colnames(results_list_p2[[15]]$pval_df)[5] <- "kurdish"

colnames(results_list_p2[[16]]$coef_df)[5] <- "kurdish"
colnames(results_list_p2[[16]]$pval_df)[5] <- "kurdish"

# Combine first data frame from each list
coef_df_p2 <- bind_rows(lapply(results_list_p2, "[[", 1))

# Combine second data frame from each list
pval_df_p2 <- bind_rows(lapply(results_list_p2, "[[", 2))

# Combine third data frame from each list
moran_df_p2 <- bind_rows(lapply(results_list_p2, "[[", 3))

# Create variables of model numbers and citynames
model_numbers <- rep(paste0("mod", 1:16), each = 81)
city_names <- rep(unique(period2$CityCode), times = 16)

coef_df_p2 <- coef_df_p2 %>% mutate(Model = model_numbers, CityCode = city_names)
pval_df_p2 <- pval_df_p2 %>% mutate(Model = model_numbers, CityCode = city_names)
moran_df_p2 <- moran_df_p2 %>% mutate(Model = paste0("mod", 1:16))

#multiply by weight and take average
coef_df_p2 <- full_join(coef_df_p2, p2_aicc_df)
coef_df_p2 <- coef_df_p2 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

# Group by model number and calculate mean of each variable
coef_p2 <- coef_df_p2 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()


pval_df_p2 <- full_join(pval_df_p2, p2_aicc_df)
pval_df_p2 <- pval_df_p2 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

pval_p2 <- pval_df_p2 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()

moran_df_p2 <- full_join(moran_df_p2, p2_aicc_df)
moran_df_p2 <- moran_df_p2 %>% 
  mutate(across(socecon:socasistpergdp, ~ . * weight))

moran_p2 <- moran_df_p2 %>%
  summarize(socecon = sum(socecon, na.rm = T),
            av_unemp = sum(av_unemp, na.rm = T),
            n_weighted = sum(n_weighted, na.rm = T),
            socasistpergdp = sum(socasistpergdp, na.rm = T)) %>%
  ungroup()

rm(coef_df, coef_df_p2, moran_df, p2_aicc_df, period2_modlist, pval_df, pval_df_p2, results_list_p2)


#PERIOD 3 
#separate dfs for coefficients, p values and moran scores
# Create an empty list to store the resulting dataframes
results_list_p3 <- list()

# Loop through the first 16 models in period2_modlist
for (i in 1:16) {
  
  # Extract the necessary variables from the model and create the coefficient dataframe
  vary <- period3_modlist[[i]]$b_vc %>% select(-"(Intercept)")
  const <- data.frame(t(period3_modlist[[i]]$c %>% select(Estimate)))
  const[2:81,] <- rep(const[1, 1:ncol(const)], times = 80)
  coef_df <- cbind(vary, const)
  
  # Extract the necessary variables from the model and create the p-value dataframe
  vary_p <- period3_modlist[[i]]$p_vc %>% select(-"(Intercept)")
  const_p <- data.frame(t(period3_modlist[[i]]$c %>% select(p_value)))
  const_p[2:81,] <- rep(const_p[1, 1:ncol(const)], times = 80)
  pval_df <- cbind(vary_p, const_p)
  
  # Extract the necessary variables from the model and create the moran dataframe
  moran_df <- period3_modlist[[i]]$s[[1]][2, ] %>% select(-"(Intercept)")
  
  
  # Combine the resulting dataframes into a list and store it in the results_list_p3
  results_list_p3[[i]] <- list(coef_df = coef_df, pval_df = pval_df, moran_df = moran_df)
  
}

# Print the resulting list of dataframes
results_list_p3

colnames(results_list_p3[[1]]$coef_df)[1] <- "socecon"
colnames(results_list_p3[[1]]$pval_df)[1] <- "socecon"
colnames(results_list_p3[[1]]$moran_df)[1] <- "socecon"

colnames(results_list_p3[[2]]$coef_df)[1] <- "av_unemp"
colnames(results_list_p3[[2]]$pval_df)[1] <- "av_unemp"
colnames(results_list_p3[[2]]$moran_df)[1] <- "av_unemp"

colnames(results_list_p3[[4]]$coef_df)[1] <- "n_weighted"
colnames(results_list_p3[[4]]$pval_df)[1] <- "n_weighted"
colnames(results_list_p3[[4]]$moran_df)[1] <- "n_weighted"

colnames(results_list_p3[[8]]$coef_df)[1] <- "socasistpergdp"
colnames(results_list_p3[[8]]$pval_df)[1] <- "socasistpergdp"
colnames(results_list_p3[[8]]$moran_df)[1] <- "socasistpergdp"

colnames(results_list_p3[[15]]$coef_df)[5] <- "kurdish"
colnames(results_list_p3[[15]]$pval_df)[5] <- "kurdish"

colnames(results_list_p3[[16]]$coef_df)[5] <- "kurdish"
colnames(results_list_p3[[16]]$pval_df)[5] <- "kurdish"

# Combine first data frame from each list
coef_df_p3 <- bind_rows(lapply(results_list_p3, "[[", 1))

# Combine second data frame from each list
pval_df_p3 <- bind_rows(lapply(results_list_p3, "[[", 2))

# Combine third data frame from each list
moran_df_p3 <- bind_rows(lapply(results_list_p3, "[[", 3))

# Create variables of model numbers and citynames
model_numbers <- rep(paste0("mod", 1:16), each = 81)
city_names <- rep(unique(period3$CityCode), times = 16)

coef_df_p3 <- coef_df_p3 %>% mutate(Model = model_numbers, CityCode = city_names)
pval_df_p3 <- pval_df_p3 %>% mutate(Model = model_numbers, CityCode = city_names)
moran_df_p3 <- moran_df_p3 %>% mutate(Model = paste0("mod", 1:16))

#multiply by weight and take average
coef_df_p3 <- full_join(coef_df_p3, p3_aicc_df)
coef_df_p3 <- coef_df_p3 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

# Group by model number and calculate mean of each variable
coef_p3 <- coef_df_p3 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()


pval_df_p3 <- full_join(pval_df_p3, p3_aicc_df)
pval_df_p3 <- pval_df_p3 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

pval_p3 <- pval_df_p3 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()

moran_df_p3 <- full_join(moran_df_p3, p3_aicc_df)
moran_df_p3 <- moran_df_p3 %>% 
  mutate(across(socecon:socasistpergdp, ~ . * weight))

moran_p3 <- moran_df_p3 %>%
  summarize(socecon = sum(socecon, na.rm = T),
            av_unemp = sum(av_unemp, na.rm = T),
            n_weighted = sum(n_weighted, na.rm = T),
            socasistpergdp = sum(socasistpergdp, na.rm = T)) %>%
  ungroup()

rm(coef_df, coef_df_p3, moran_df, p3_aicc_df, period3_modlist, pval_df, pval_df_p3, results_list_p3)


#PERIOD 4
#separate dfs for coefficients, p values and moran scores
# Create an empty list to store the resulting dataframes
results_list_p4 <- list()

# Loop through the first 16 models in period2_modlist
for (i in 1:16) {
  
  # Extract the necessary variables from the model and create the coefficient dataframe
  vary <- period4_modlist[[i]]$b_vc %>% select(-"(Intercept)")
  const <- data.frame(t(period4_modlist[[i]]$c %>% select(Estimate)))
  const[2:81,] <- rep(const[1, 1:ncol(const)], times = 80)
  coef_df <- cbind(vary, const)
  
  # Extract the necessary variables from the model and create the p-value dataframe
  vary_p <- period4_modlist[[i]]$p_vc %>% select(-"(Intercept)")
  const_p <- data.frame(t(period4_modlist[[i]]$c %>% select(p_value)))
  const_p[2:81,] <- rep(const_p[1, 1:ncol(const)], times = 80)
  pval_df <- cbind(vary_p, const_p)
  
  # Extract the necessary variables from the model and create the moran dataframe
  moran_df <- period4_modlist[[i]]$s[[1]][2, ] %>% select(-"(Intercept)")
  
  
  # Combine the resulting dataframes into a list and store it in the results_list_p4
  results_list_p4[[i]] <- list(coef_df = coef_df, pval_df = pval_df, moran_df = moran_df)
  
}

# Print the resulting list of dataframes
results_list_p4

colnames(results_list_p4[[1]]$coef_df)[1] <- "socecon"
colnames(results_list_p4[[1]]$pval_df)[1] <- "socecon"
colnames(results_list_p4[[1]]$moran_df)[1] <- "socecon"

colnames(results_list_p4[[2]]$coef_df)[1] <- "av_unemp"
colnames(results_list_p4[[2]]$pval_df)[1] <- "av_unemp"
colnames(results_list_p4[[2]]$moran_df)[1] <- "av_unemp"

colnames(results_list_p4[[4]]$coef_df)[1] <- "n_weighted"
colnames(results_list_p4[[4]]$pval_df)[1] <- "n_weighted"
colnames(results_list_p4[[4]]$moran_df)[1] <- "n_weighted"

colnames(results_list_p4[[8]]$coef_df)[1] <- "socasistpergdp"
colnames(results_list_p4[[8]]$pval_df)[1] <- "socasistpergdp"
colnames(results_list_p4[[8]]$moran_df)[1] <- "socasistpergdp"

colnames(results_list_p4[[15]]$coef_df)[5] <- "kurdish"
colnames(results_list_p4[[15]]$pval_df)[5] <- "kurdish"

colnames(results_list_p4[[16]]$coef_df)[5] <- "kurdish"
colnames(results_list_p4[[16]]$pval_df)[5] <- "kurdish"

# Combine first data frame from each list
coef_df_p4 <- bind_rows(lapply(results_list_p4, "[[", 1))

# Combine second data frame from each list
pval_df_p4 <- bind_rows(lapply(results_list_p4, "[[", 2))

# Combine third data frame from each list
moran_df_p4 <- bind_rows(lapply(results_list_p4, "[[", 3))

# Create variables of model numbers and citynames
model_numbers <- rep(paste0("mod", 1:16), each = 81)
city_names <- rep(unique(period1$CityCode), times = 16)

coef_df_p4 <- coef_df_p4 %>% mutate(Model = model_numbers, CityCode = city_names)
pval_df_p4 <- pval_df_p4 %>% mutate(Model = model_numbers, CityCode = city_names)
moran_df_p4 <- moran_df_p4 %>% mutate(Model = paste0("mod", 1:16))

#multiply by weight and take average
coef_df_p4 <- full_join(coef_df_p4, p4_aicc_df)
coef_df_p4 <- coef_df_p4 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

# Group by model number and calculate mean of each variable
coef_p4 <- coef_df_p4 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()


pval_df_p4 <- full_join(pval_df_p4, p4_aicc_df)
pval_df_p4 <- pval_df_p4 %>% 
  mutate(across(socecon:kurdish, ~ . * weight))

pval_p4 <- pval_df_p4 %>%
  group_by(CityCode) %>%
  summarize(socecon = sum(socecon),
            av_unemp = sum(av_unemp),
            n_weighted = sum(n_weighted),
            socasistpergdp = sum(socasistpergdp),
            kurdish = sum(kurdish)) %>% ungroup()

moran_df_p4 <- full_join(moran_df_p4, p4_aicc_df)
moran_df_p4 <- moran_df_p4 %>% 
  mutate(across(socecon:socasistpergdp, ~ . * weight))

moran_p4 <- moran_df_p4 %>%
  summarize(socecon = sum(socecon, na.rm = T),
            av_unemp = sum(av_unemp, na.rm = T),
            n_weighted = sum(n_weighted, na.rm = T),
            socasistpergdp = sum(socasistpergdp, na.rm = T)) %>%
  ungroup()

rm(coef_df, coef_df_p4, const, const_p, moran_df, p4_aicc_df, period4_modlist, pval_df, pval_df_p4, results_list_p4, vary, vary_p)
save(period1, period2, period3, period4, coef_p1,coef_p2, coef_p3, coef_p4, pval_p1, pval_p2, pval_p3, pval_p4, moran_p1, moran_p2,moran_p3, moran_p4, file = "model_averages.Rdata")
